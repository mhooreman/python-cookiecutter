[project]
name = "{{ cookiecutter.pypi_package_name }}"
version = "{{ cookiecutter.first_version }}"
description = "{{ cookiecutter.shortdescription }}"
readme = "README.md"
authors = [
    { name = "MichaÃ«l Hooreman", email = "mhooreman@icloud.com" }
]
requires-python = ">=3.13"
dependencies = [
    "click>=8.3.0",
]

[build-system]
requires = ["uv_build>=0.8.12,<0.9.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "coverage>=7.10.6",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "ruff>=0.13.1",
]

[project.scripts]
{{ cookiecutter.project_slug }}="{{ cookiecutter.project_slug }}.app:main"

[tool.ruff]
line-length = 79  # pep8
preview = true  # Needed if you want to evable CPY DOC and/or FAST
include = ['pyproject.toml', 'src/**/*.py', 'tests/**/*.py']

[tool.ruff.lint.per-file-ignores]
'tests/*' = [
    'S101',  # Pytest uses assert
    'ANN',  # Not needed to annotate
    'F811',  # Fixtures not compatible with that
    'F401',  # Fixtures not compatible with that
    'D',   # No need to document test api
]

[tool.ruff.lint]
dummy-variable-rgx = "^_$"  #  Only ignore variables named "_"
task-tags = ["TODO", ]  # XXX and FIXME are discouraged by some rules
select = [
    "N",       # pep8-naming
    "D",       # pydocstyle
    "F",       # Pyflakes
    "E",       # E/W pycodestyle
    "W",       # E/W pycodestyle
    "C90",     # mccabe
    "I",       # isort
    "UP",      # pyupgrade
    "YTT",     # flake8-2020
    "ANN",     # flake8-annotations
    "ASYNC",   # flake8-async
    "S",       # flake8-bandit
    "BLE",     # flake8-blind-except
    "FBT",     # flake8-boolean-trap
    "B",       # flake8-bugbear
    "A",       # flake8-builtins
    "COM",     # flake8-commas
    "C4",      # flake8-comprehensions
    "DTZ",     # flake8-datetimez
    "T10",     # flake8-debugger
    "DJ",      # flake8-django
    "EM",      # flake8-errmsg
    "EXE",     # flake8-executable
    "FA",      # flake8-future-annotations
    "ISC",     # flake8-implicit-str-concat
    "ICN",     # flake8-import-conventions
    "LOG",     # flake8-logging
    "G",       # flake8-logging-format
    "INP",     # flake8-no-pep420
    "PIE",     # flake8-pie
    "T20",     # flake8-print
    "PYI",     # flake8-pyi
    "PT",      # flake8-pytest-style
    "Q",       # flake8-quotes
    "RSE",     # flake8-raise
    "RET",     # flake8-return
    "SLF",     # flake8-self
    "SLOT",    # flake8-slots
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "TCH",     # flake8-type-checking
    "INT",     # flake8-gettext
    "ARG",     # flake8-unused-arguments
    "PTH",     # flake8-use-pathlib
    "TD",      # flake8-todos
    "FIX",     # flake8-fixme
    "ERA",     # eradicate
    "PD",      # pandas-vet
    "PGH",     # pygrep-hooks
    "PL",      # Pylint
    "TRY",     # tryceratops
    "FLY",     # flynt
    "NPY",     # NumPy-specific rules
    "AIR",     # Airflow
    "PERF",    # Perflint
    "FURB",    # refurb
    "RUF",     # Ruff-specific rules
    "CPY",     # flake8-copyright - only in preview mode
    # "FAST",  # FastAPI - only in preview mode
    # "DOC",   # pydoclint - only in preview mode
]
ignore = [
    # False positive because of standard library replacement
    "S413",    # replaced pycrpyto by pycryptodome
    # Those ones makes conflict
    "D203",    # We prefer D211
    "D213",    # We prefer D212
    "COM812",  #
    "ISC001",  #
    # Disabled as it doesn't agree with mypy
    "UP040",   # `TypeAlias` annotation not yet supported by mypy
    "PGH003",  # we don't know the rule name from mypy...
    # We don't agree
    "D416",    # Since we use underlining for sections, we don't want column
    "PD010",   # Replace unstack by pivot_table
    # Those we accept
    "CPY001",  # No copyright at the beginning of a file
    "DTZ005",  # Missing time zone info when reading time
    "DTZ011",  # datetime.date.today() used
    "PD002",   # Pandas inplace should be avoided. I don't agree.
]

[tool.mypy]
strict = true
show_error_context = true
show_column_numbers = true
show_error_end = true
show_error_code_links = true
pretty = true
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"
packages = ['{{cookiecutter.project_slug}}', ]

[tool.pytest.ini_options]
console_output_style = "classic"
log_auto_indent = true
log_cli = true
pythonpath = ["src", ]
# required_plugins = []
testpaths = ["tests", ]
addopts = "--cov"

[tool.coverage.run]
branch = true
omit = ["tests/*", ]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if TYPE_CHECKING:",
]
format = "text"
show_missing = true
